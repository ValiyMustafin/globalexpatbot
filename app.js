const { Telegraf, Markup, session } = require('telegraf')
require('dotenv').config()
const constvalue = require('./components/const')
const keywords = require('./keywords/keywords')
const buttons = require('./components/buttons')
const dates = require('./components/mailing')
const {restartMailing} = require('./components/mailing')
const { countVersion, click_version } = require('./keywords/keywords')
const { Messages } = require('./components/sendMessages')
const { Start } = require('./components/start')
const { Finish, Answers, sendAnswers } = require('./components/commands')
const { sendQuestion, adminListFunc, mailingTime, mailingCancel, mailingCreate, mailingList, Actions } = require('./components/buttons')
const sequelize = require('./db/db')
const { User, Mailing } = require('./db/models')

const start_db = async () => {
  try {
    await sequelize.authenticate()
    await sequelize.sync()
  } catch (e) {
    console.log(e)
  }
}

start_db()

const bot = new Telegraf(process.env.BOT_TOKEN)
if (process.env.BOT_TOKEN === undefined) {
  throw new Error('BOT_TOKEN must be provided!')
}

bot.use(session())


bot.command('restart', ctx => {
  if (ctx.chat.id == 408178231) {
    restartMailing(ctx)
  }
})

bot.command('start', async (ctx) => {
  try {
    Start(ctx)
  } catch (e) {
    console.log(e)
  }
})

bot.catch((err) => {
  console.log('Ooops', err)
})

bot.command('test', async (ctx) => {
  bot.catch((err) => {
    console.log('Ooops', err)
  })
  try {
    bot.catch((err) => {
      console.log('Ooops', err)
    })
    await ctx.telegram.sendMessage('408178231', '—Ç–µ—Å—Ç', { parse_mode: "HTML" })
  } catch (e) {
    console.log(e)
  }
})

bot.hears('üë• –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', async (ctx) => {
  const user = await User.findOne({ where: { chatId: String(ctx.chat.id) } })
  if (user.role == 'admin') {
    await ctx.reply('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Å—ã–ª–∫–∞–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ: https://t.me/+QHfYDVPWSgY1Yjli', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–ù–∞–π—Ç–∏ –¥–∏–∞–ª–æ–≥', 'findDialog')]
      ]))
  }
})

bot.hears('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', async (ctx) => {
  const user = await User.findOne({ where: { chatId: String(ctx.chat.id) } })
  if (user.role == 'admin') {
    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'mailing_create')]
      ]))
  }
})

bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => {
  const user = await User.findOne({ where: { chatId: String(ctx.chat.id) } })
  if (user.role == 'admin') {
    await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', 'adminList')]
      ]))
  }
})

bot.action('adminList', async (ctx) => {
  try {
    adminListFunc(ctx)
  } catch (e) {
    console.log(e)
  }
})

bot.action('adminAdd', async (ctx) => {
  try {
    ctx.session ??= { addadmin: 0 }
    await ctx.answerCbQuery()
    ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, @login) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', Markup.inlineKeyboard(
      [
        [Markup.button.callback('‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'adminList')]
      ]))
    ctx.session.addadmin = 1
  } catch (e) {
    console.log(e)
  }
})

bot.action('adminSource', async (ctx) => {
  try {
    ctx.session ??= { addadmin: 0 }
    await ctx.answerCbQuery()
    ctx.replyWithHTML('–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–æ–≤\n\n<code>https://t.me/globalexpat_bot?start=LnLH7DmMtH57uS4W</code>')
    ctx.session.addadmin = 1
  } catch (e) {
    console.log(e)
  }
})

bot.action('adminSetting', async (ctx) => {
  try {
    await ctx.answerCbQuery()
    await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', 'adminList')]
      ]))
  } catch (e) {
    console.log(e)
  }
})

bot.action('adminDelete', async (ctx) => {
  try {
    adminList = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ä—è–¥–æ–º —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —É–¥–∞–ª—è–µ—Ç–µ\n\n'
    await ctx.answerCbQuery()
    const users = await User.findAll({ where: { role: 'admin' } });
    usersList = JSON.stringify(users, null, 2)
    const usersObj = JSON.parse(usersList);
    const count = await User.count({ where: { role: 'admin' } })
    for (var i = 0; i < count; i++) {
      if (usersObj[i].username != '@' + ctx.from.username) {
        adminList = adminList.concat('- /del' + usersObj[i].id + ' ' + usersObj[i].name + ' | ' + usersObj[i].username + '\n')
      }
    }
    ctx.editMessageText(adminList, Markup.inlineKeyboard(
      [
        [Markup.button.callback('‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'adminList')]
      ]))
  } catch (e) {
    console.log(e)
  }
})

allAdmins()
function allAdmins() {
  for (i = 0; i < 150; i++) {
    deleteAdmin('del' + i)
  }
}

function deleteAdmin(comm) {
  bot.command(comm, async (ctx) => {
    try {
      const user = await User.findOne({ where: { chatId: String(ctx.chat.id) } })
      if (user.role == 'admin') {
        del_id = comm.split('del').pop()
        console.log(del_id)
        const deladmin = await User.findOne({ where: { id: del_id } })
        deladmin.role = 'user'
        await deladmin.save()
        ctx.reply('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ' + deladmin.username + ' —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        await ctx.telegram.sendMessage(deladmin.chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @' + ctx.message.from.username + ' –∑–∞–∫—Ä—ã–ª –≤–∞–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
          reply_markup: { remove_keyboard: true },
        })
      }
    } catch (e) {
      console.log(e)
    }
  })
}


//–ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–°–£–ñ–î–ï–ù–ò–Ø
bot.command('finish', async (ctx) => {
  try {
    Finish(ctx)
  } catch (e) {
    console.log(e)
  }
})

//–ì–û–¢–û–í–´–ï –û–¢–í–ï–¢–´
bot.command('answers', async (ctx) => {
  try {
    Answers(ctx)
  } catch (e) {
    console.log(e)
  }
})

allAnswers()

function allAnswers() {
  countVersion()
  for (i = 0; i < keywords.countVer; i++) {
    sendReadyAnswer('btn_q' + i)
  }
}

function sendReadyAnswer(comm) {
  bot.command(comm, async (ctx) => {
    try {
      sendAnswers(ctx, comm)
    } catch (e) {
      console.log(e)
    }
  })
}

//–¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
bot.on('text', async (ctx) => {
  try {
    Messages(ctx, 'text')
  } catch (e) {
    console.log(e)
  }
})

//–°–ö–†–ò–ù–´
bot.on('photo', async (ctx) => {
  try {
    Messages(ctx, 'photo')
  } catch (e) {
    console.log(e)
  }
})

//–ì–ò–§–ö–ò
bot.on('animation', async (ctx) => {
  try {
    Messages(ctx, 'animation')
  } catch (e) {
    console.log(e)
  }
})

//–í–ò–î–ï–û
bot.on('video', async (ctx) => {
  try {
    Messages(ctx, 'video')
  } catch (e) {
    console.log(e)
  }
})

//–§–ê–ô–õ
bot.on('document', async (ctx) => {
  try {
    Messages(ctx, 'document')
  } catch (e) {
    console.log(e)
  }
})

//–ì–û–õ–û–°–û–í–£–•–ò
bot.on('voice', async (ctx) => {
  try {
    Messages(ctx, 'voice')
  } catch (e) {
    console.log(e)
  }
})

//–ü–ï–†–ï–î–ê–¢–¨ –í–û–ü–†–û–° –°–õ–£–ñ–ë–ï –ü–û–î–î–ï–†–ñ–ö–ò
bot.action('btn_n', async (ctx) => {
  try {
    sendQuestion(ctx)
  } catch (e) {
    console.log(e)
  }
})

bot.action('mailing_t', async (ctx) => {
  try {
    mailingTime(ctx)
  } catch (e) {
    console.log(e)
  }
})

bot.action('mailing_n', async (ctx) => {
  try {
    mailingCancel(ctx)
  } catch (e) {
    console.log(e)
  }
})

bot.action('mailing_create', async (ctx) => {
  try {
    mailingCreate(ctx)
  } catch (e) {
    console.log(e)
  }
})


bot.action('mailing_list', (ctx) => {
  try {
    mailingList(ctx)
  } catch (e) {
    console.log(e)
  }
})

allTriggers()

function allTriggers() {
  for (trigger of buttons.triggers) {
    clickTrigger(trigger)
  }
}

function clickTrigger(trigger) {
  bot.action(trigger, async (ctx) => {
    try {
      Actions(ctx, trigger)
    } catch (e) {
      console.log(e)
    }
  })
}


bot.action('findDialog', async (ctx) => {
  try {
    ctx.reply('–ü—Ä–æ–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @login)')
  } catch (e) {
    console.log(e)
  }
})
//–û–¢–í–ï–¢–´ –ù–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ù–´–ï –í–ê–†–ò–ê–ù–¢–´

allActions()

function answerAction(btnId) {
  try {
    bot.action(btnId, async (ctx) => {
      click_version(btnId)
      await ctx.answerCbQuery()
      await ctx.editMessageText(keywords.answer, { parse_mode: "HTML" })
      await ctx.replyWithHTML(constvalue.ifcannothelptext, Markup.inlineKeyboard(
        [keywords.sendtoservice]))
    })
  } catch (e) {
    console.log(e)
  }
}

function allActions() {
  countVersion()
  for (i = 0; i < keywords.countVer; i++) {
    answerAction('btn_q' + i)
  }
}


bot.start()

bot.launch()
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))