const { Telegraf, Markup, session } = require('telegraf')
require('dotenv').config()
const { Mailing } = require('../../../db/models')
const constmailing = require('./general')

const bot = new Telegraf(process.env.BOT_TOKEN)
bot.use(session())


async function mailingCreate(ctx) {
    ctx.session ??= { mailingCreateStep: 0 }
    ctx.session.mailingCreateStep = 1
    await ctx.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏/–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:\nüìå –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é <b>...</b>\nüìå –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é <i>...</i>\nüìå –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é <a href="—Å—Å—ã–ª–∫–∞">...</a>', Markup.inlineKeyboard(
        [
            [Markup.button.callback('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'mailing_exit')]
        ]))
}

async function mailingTime(ctx) {
    ctx.session ??= { mailingCreateStep: 0 }
    ctx.session.mailingCreateStep = 2
    // await ctx.answerCbQuery()
    await ctx.editMessageText('–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:\n\n- <code>masterclass1</code>\n- <code>masterclass2</code>\n- <code>masterclass2.1</code>\n- <code>user</code>\n- <code>guest</code>', { parse_mode: "HTML" })
}

async function mailingExit(ctx) {
    try {
        ctx.session ??= { mailingCreateStep: 0 }
        ctx.session.mailingCreateStep = 0
        await ctx.answerCbQuery()
        await ctx.editMessageText(constmailing.mailingFirstText, Markup.inlineKeyboard(
            constmailing.mailingFirstKeyboard))
    } catch (e) {
        console.log(e)
    }
}

async function mailingCancel(ctx) {
    ctx.session ??= { mailingCreateStep: 0 }
    try {
        const mailing = await Mailing.findOne({ where: { sent: String(ctx.chat.id) } })
        mailing.sent = -1
        await mailing.save()
    } catch {
        s = ctx.update.callback_query.message.text
        var mailing_id = s.split('id: ').pop();
        const mailing = await Mailing.findOne({ where: { id: mailing_id } })
        mailing.sent = -1
        await mailing.save()
    }
    await ctx.answerCbQuery()
    await ctx.editMessageText('‚ùå–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    ctx.session.mailingCreateStep = 0
}

exports.mailingTime = mailingTime
exports.mailingCancel = mailingCancel
exports.mailingCreate = mailingCreate
exports.mailingExit = mailingExit